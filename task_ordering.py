import streamlit as st
import pandas as pd
import numpy as np
from word_export import save_report_to_word  # –ù–µ –∑–∞–±—É–¥—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

def build_incidence_matrix(edges):
    nodes = sorted(set([e[0] for e in edges] + [e[1] for e in edges]))
    node_index = {node: i for i, node in enumerate(nodes)}
    matrix = np.zeros((len(nodes), len(nodes)), dtype=int)

    for src, dst in edges:
        matrix[node_index[src]][node_index[dst]] = 1

    return pd.DataFrame(matrix, index=nodes, columns=nodes)

def classify_tasks(inc_matrix):
    matrix = inc_matrix.copy()
    classes = []
    while not matrix.empty:
        zero_in = matrix.sum(axis=0)
        current_class = zero_in[zero_in == 0].index.tolist()
        if not current_class:
            return None
        classes.append(current_class)
        matrix = matrix.drop(index=current_class, columns=current_class)
    return classes

def run_task_ordering_ui():
    st.subheader("üìê –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á (–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º)")

    if "ordering_ready" not in st.session_state:
        st.session_state["ordering_ready"] = False
    if "ordering_data" not in st.session_state:
        st.session_state["ordering_data"] = {}

    st.markdown("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥—É–≥ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏:")
    default_edges = pd.DataFrame({
        "–ò–∑ –∑–∞–¥–∞—á–∏": [1, 1, 3],
        "–í –∑–∞–¥–∞—á—É": [' ' + str(i) for i in [2, 3, 4]]
    })

    edge_df = st.data_editor(
        default_edges,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True
    )

    if st.button("üìä –£–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –∑–∞–¥–∞—á–∏"):
        try:
            edges = [(int(row["–ò–∑ –∑–∞–¥–∞—á–∏"]), int(row["–í –∑–∞–¥–∞—á—É"])) for _, row in edge_df.iterrows()]
            matrix = build_incidence_matrix(edges)
            result = classify_tasks(matrix)

            if result is None:
                st.session_state["ordering_ready"] = False
                st.error("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ü–∏–∫–ª –≤ –≥—Ä–∞—Ñ–µ! –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            else:
                texts = []
                for i, cls in enumerate(result, 1):
                    txt = f"–ö–ª–∞—Å—Å {i}: {', '.join(map(str, cls))}"
                    texts.append(txt)

                st.session_state["ordering_data"] = {
                    "edges": edge_df,
                    "matrix": matrix,
                    "texts": texts
                }
                st.session_state["ordering_ready"] = True

        except Exception as e:
            st.session_state["ordering_ready"] = False
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    if st.session_state.get("ordering_ready"):
        st.markdown("### üìÑ –ú–∞—Ç—Ä–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ü–∏–π")
        st.dataframe(st.session_state["ordering_data"]["matrix"])

        st.markdown("### üß© –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∑–∞–¥–∞—á:")
        for line in st.session_state["ordering_data"]["texts"]:
            st.markdown(f"**{line}**")

        if st.button("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Word"):
            buffer = save_report_to_word(
                title="–£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
                input_tables={"–°–ø–∏—Å–æ–∫ –¥—É–≥": st.session_state["ordering_data"]["edges"]},
                output_tables={"–ú–∞—Ç—Ä–∏—Ü–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ü–∏–π": st.session_state["ordering_data"]["matrix"]},
                texts=st.session_state["ordering_data"]["texts"]
            )
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", buffer, file_name="–£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ_–∑–∞–¥–∞—á.docx")
