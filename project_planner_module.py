import streamlit as st
import pandas as pd
from resource_load_module import plot_resource_load
from gantt_module import plot_gantt_diagram
from word_export import save_report_to_word

def run_project_planner_ui():
    st.subheader("üõ†Ô∏è –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

    if "planner_ready" not in st.session_state:
        st.session_state["planner_ready"] = False
    if "planner_data" not in st.session_state:
        st.session_state["planner_data"] = {}

    default_df = pd.DataFrame({
        "–ó–∞–¥–∞—á–∞": [str(i) for i in range(1, 16)],
        "–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏": [
            "", "1", "2", "3", "4",
            "5", "6", "7", "8", "9",
            "8", "6", "11", "10,11,12,13", "14"
        ],
        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞": [pd.Timestamp.today().strftime("%d.%m.%y")] * 15,
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": [
            "2", "1", "2", "3", "3", "2", "2", "2", "3", "2",
            "3", "2", "2", "2", "2"
        ],
        "–†–µ—Å—É—Ä—Å—ã": [
            "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π", "–ò–Ω–∂–µ–Ω–µ—Ä", "–†–∞–±–æ—á–∏–π,–¢–µ—Ö–Ω–∏–∫", "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π",
            "–†–∞–±–æ—á–∏–π,–¢–µ—Ö–Ω–∏–∫", "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π", "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π", "–†–∞–±–æ—á–∏–π,–¢–µ—Ö–Ω–∏–∫",
            "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π", "–ò–Ω–∂–µ–Ω–µ—Ä,–†–∞–±–æ—á–∏–π", "–¢–µ—Ö–Ω–∏–∫,–†–∞–±–æ—á–∏–π", "–†–∞–±–æ—á–∏–π,–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "–†–∞–±–æ—á–∏–π,–ò–Ω–∂–µ–Ω–µ—Ä", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,–†–∞–±–æ—á–∏–π", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,–†–∞–±–æ—á–∏–π"
        ],
        "% –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏": ["50,50"] * 15
    })

    task_df = st.data_editor(
        default_df,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True
    )

    start_date_input = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞", pd.Timestamp.today())
    workdays_per_week = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ", [5, 6], index=0)

    if st.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏"):
        try:
            df_for_gantt = task_df.copy()
            df_for_resource = task_df.copy()

            gantt_fig = plot_gantt_diagram(df_for_gantt, start_date_input, workdays_per_week)
            resource_figs = plot_resource_load(df_for_resource, workdays_per_week)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ —Å–µ—Å—Å–∏—é
            st.session_state["planner_ready"] = True
            st.session_state["planner_data"] = {
                "input_table": task_df,
                "gantt_fig": gantt_fig,
                "resource_figs": resource_figs
            }

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
            st.session_state["planner_ready"] = False

    if st.session_state.get("planner_ready", False):
        st.subheader("üìÖ –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞")
        st.pyplot(st.session_state["planner_data"]["gantt_fig"], use_container_width=True)

        st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤")
        cols = st.columns(2)
        for i, fig in enumerate(st.session_state["planner_data"]["resource_figs"]):
            with cols[i % 2]:
                st.pyplot(fig, use_container_width=True)

        if st.button("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Word"):
            buffer = save_report_to_word(
                title="–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤",
                input_tables={"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": st.session_state["planner_data"]["input_table"]},
                output_tables={},
                texts=["–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ä–æ–ª—è–º"],
                images=[st.session_state["planner_data"]["gantt_fig"]] + st.session_state["planner_data"]["resource_figs"]
            )
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", buffer, file_name="–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ_–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.docx")
