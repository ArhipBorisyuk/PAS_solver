import streamlit as st
import pandas as pd
import networkx as nx
from word_export import save_report_to_word


def run_critical_path_ui():
    st.subheader("–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ (CPM)")
    st.markdown("–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–µ–π")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if "cpm_ready" not in st.session_state:
        st.session_state["cpm_ready"] = False
    if "cpm_data" not in st.session_state:
        st.session_state["cpm_data"] = {}

    # –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dependencies = {
        1: [], 2: [1], 3: [2], 4: [3], 5: [4], 6: [5], 7: [6], 8: [7], 9: [8],
        10: [9], 11: [8], 12: [6], 13: [11], 14: [10, 11, 12, 13], 15: [14]
    }
    durations = {
        1: 2, 2: 1, 3: 2, 4: 3, 5: 3, 6: 2, 7: 2, 8: 2, 9: 3, 10: 2,
        11: 3, 12: 2, 13: 2, 14: 2, 15: 2
    }

    # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    table_data = []
    for task in sorted(durations.keys()):
        preds = dependencies.get(task, [])
        table_data.append({
            "–ó–∞–¥–∞—á–∞": task,
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": durations[task],
            "–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏": " ".join(map(str, preds))
        })

    task_table = st.data_editor(
        pd.DataFrame(table_data),
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True
    )

    if st.button("üìà –í—ã–ø–æ–ª–Ω–∏—Ç—å CPM-–∞–Ω–∞–ª–∏–∑"):
        try:
            G = nx.DiGraph()
            durations = {}
            predecessors = {}

            for _, row in task_table.dropna().iterrows():
                task = int(float(row["–ó–∞–¥–∞—á–∞"]))
                dur = int(float(row["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]))
                preds = str(row["–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏"]).replace(",", " ").split()
                preds = list(map(int, preds)) if preds else []

                durations[task] = dur
                predecessors[task] = preds

                for pred in preds:
                    G.add_edge(pred, task)

            # –†–∞–Ω–Ω–∏–µ —Å—Ä–æ–∫–∏
            early_start = {}
            for node in nx.topological_sort(G):
                preds = predecessors.get(node, [])
                early_start[node] = max([early_start[p] + durations[p] for p in preds], default=0)

            project_duration = max(early_start[t] + durations[t] for t in G.nodes)

            # –ü–æ–∑–¥–Ω–∏–µ —Å—Ä–æ–∫–∏
            latest_start = {}
            for node in reversed(list(nx.topological_sort(G))):
                succs = list(G.successors(node))
                if not succs:
                    latest_start[node] = project_duration - durations[node]
                else:
                    latest_start[node] = min([latest_start[s] - durations[node] for s in succs])

            # –†–µ–∑–µ—Ä–≤—ã
            reserves = {n: latest_start[n] - early_start[n] for n in G.nodes}
            critical_path = [n for n in G.nodes if reserves[n] == 0]

            # –¢–∞–±–ª–∏—Ü–∞ 1 ‚Äì –†–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è
            df_early = []
            for task in G.nodes:
                preds = predecessors.get(task, [])
                early_preds = [early_start[p] for p in preds]
                durations_preds = [durations[p] for p in preds]
                calc = f"max({', '.join(str(e + d) for e, d in zip(early_preds, durations_preds))})" if preds else "-"
                df_early.append([
                    task,
                    ", ".join(map(str, preds)) if preds else "",
                    ", ".join(map(str, early_preds)) if preds else "",
                    ", ".join(map(str, durations_preds)) if preds else "",
                    calc,
                    early_start[task]
                ])
            df_early = pd.DataFrame(df_early, columns=[
                "‚Ññ —Ä–∞–±–æ—Ç—ã", "–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", "–†–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥.",
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥.", "–†–∞—Å—á—ë—Ç", "–ò—Ç–æ–≥ —Ä–∞–Ω–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞"
            ])

            # –¢–∞–±–ª–∏—Ü–∞ 2 ‚Äì –ü–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è
            df_late = []
            for task in G.nodes:
                succs = list(G.successors(task))
                latest_succs = [latest_start[s] for s in succs]
                calc = f"min({', '.join(str(ls - durations[task]) for ls in latest_succs)})" if succs else "-"
                df_late.append([
                    task,
                    ", ".join(map(str, succs)) if succs else "",
                    ", ".join(map(str, latest_succs)) if succs else "",
                    durations[task],
                    calc,
                    latest_start[task]
                ])
            df_late = pd.DataFrame(df_late, columns=[
                "‚Ññ —Ä–∞–±–æ—Ç—ã", "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–∏", "–ü–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª.",
                "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–†–∞—Å—á—ë—Ç", "–ò—Ç–æ–≥ –ø–æ–∑–¥–Ω–µ–≥–æ –Ω–∞—á–∞–ª–∞"
            ])

            # –¢–∞–±–ª–∏—Ü–∞ 3 ‚Äì –†–µ–∑–µ—Ä–≤—ã
            df_reserve = pd.DataFrame([
                [t, early_start[t], latest_start[t], reserves[t]] for t in G.nodes
            ], columns=["‚Ññ —Ä–∞–±–æ—Ç—ã", "–†–∞–Ω–Ω–µ–µ –Ω–∞—á–∞–ª–æ", "–ü–æ–∑–¥–Ω–µ–µ –Ω–∞—á–∞–ª–æ", "–†–µ–∑–µ—Ä–≤"])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ session_state
            st.session_state["cpm_ready"] = True
            st.session_state["cpm_data"] = {
                "task_table": task_table,
                "df_early": df_early,
                "df_late": df_late,
                "df_reserve": df_reserve,
                "critical_path": critical_path,
                "duration": project_duration
            }

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ CPM-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            st.session_state["cpm_ready"] = False

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    if st.session_state.get("cpm_ready", False):
        data = st.session_state["cpm_data"]

        st.markdown("### üßÆ –¢–∞–±–ª–∏—Ü–∞ 1 ‚Äì –†–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç")
        st.dataframe(data["df_early"], use_container_width=True)

        st.markdown("### üïì –¢–∞–±–ª–∏—Ü–∞ 2 ‚Äì –ü–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç")
        st.dataframe(data["df_late"], use_container_width=True)

        st.markdown("### üßæ –¢–∞–±–ª–∏—Ü–∞ 3 ‚Äì –†–µ–∑–µ—Ä–≤ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç")
        st.dataframe(data["df_reserve"], use_container_width=True)

        st.success(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {' ‚Üí '.join(map(str, data['critical_path']))}")
        st.info(f"üïí –û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–µ–∫—Ç–∞: {data['duration']} –¥–Ω–µ–π")

        if st.button("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Word"):
            buffer = save_report_to_word(
                title="–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏",
                input_tables={"–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ": data["task_table"]},
                output_tables={
                    "–¢–∞–±–ª–∏—Ü–∞ 1 ‚Äì –†–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è": data["df_early"],
                    "–¢–∞–±–ª–∏—Ü–∞ 2 ‚Äì –ü–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è": data["df_late"],
                    "–¢–∞–±–ª–∏—Ü–∞ 3 ‚Äì –†–µ–∑–µ—Ä–≤—ã": data["df_reserve"],
                },
                texts=[
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {' ‚Üí '.join(map(str, data['critical_path']))}",
                    f"–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–µ–∫—Ç–∞: {data['duration']} –¥–Ω–µ–π"
                ]
            )
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç", buffer, file_name="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π_–ø—É—Ç—å.docx")
